"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var forms_1 = require("@angular/forms");
var SemanticSelectComponent = (function () {
    function SemanticSelectComponent() {
        this.multiple = false;
        this.onChange = new core_1.EventEmitter();
    }
    SemanticSelectComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        if (typeof this.class === "string" && this.class.search("multiple") >= 0) {
            this.select.nativeElement.setAttribute("multiple", true);
        }
        jQuery(this.select.nativeElement)
            .dropdown(this.options || {})
            .dropdown({
            onChange: function (value) { return _this.onChange.emit(value); }
        });
    };
    __decorate([
        core_1.Input(), 
        __metadata('design:type', forms_1.FormControl)
    ], SemanticSelectComponent.prototype, "control", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], SemanticSelectComponent.prototype, "class", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object)
    ], SemanticSelectComponent.prototype, "options", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], SemanticSelectComponent.prototype, "placeholder", void 0);
    __decorate([
        core_1.Output(), 
        __metadata('design:type', core_1.EventEmitter)
    ], SemanticSelectComponent.prototype, "onChange", void 0);
    __decorate([
        core_1.ViewChild("select"), 
        __metadata('design:type', core_1.ElementRef)
    ], SemanticSelectComponent.prototype, "select", void 0);
    SemanticSelectComponent = __decorate([
        core_1.Component({
            changeDetection: core_1.ChangeDetectionStrategy.OnPush,
            directives: [forms_1.REACTIVE_FORM_DIRECTIVES],
            selector: "sm-select",
            template: "<select [formControl]=\"control\" class=\"ui {{class}} dropdown\"  #select>\n        <option value=\"\">{{placeholder}}</option>\n        <ng-content></ng-content>\n      </select>"
        }), 
        __metadata('design:paramtypes', [])
    ], SemanticSelectComponent);
    return SemanticSelectComponent;
}());
exports.SemanticSelectComponent = SemanticSelectComponent;
